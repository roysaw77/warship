//class Destroyer : public movingShip {
// public:
//     void action() override {
//         actionMoving();
//     }

 
//       Destroyer(string sym, vector<vector<string>> &gameMap)
//         : ship(sym, -1, -1, gameMap) {
//         generateShip(sym);
//     }

//         void actionMoving() override {
//         pair<int, int> location = getLocation();
//         int i = location.first;
//         int j = location.second;

//         int newI, newJ; // Declare variables outside the loop
//         do {
//             newI = i + (rand() % 3 - 1); // Generate new random position
//             newJ = j + (rand() % 3 - 1);
//         } while (!isWithinBound(newI, newJ)); // Check bounds only in the loop

//         gameMap[i][j] = ""; // Clear old position after confirming new position is valid
//         placeShip(gameMap, sym, newI, newJ); // Place ship at new position
//         cout << "Ship: " << sym << " moved to (" << newI + 1 << ", " << newJ + 1 << ")" << endl;

//         // Update ship's location after moving
//         setLocation(newI, newJ);
//     }
// };

// class Frigate : public shootingShip {
// public:
//     void action() override {
//         actionShooting();
//     }
//      Frigate(string sym, vector<vector<string>> &gameMap)
//         : ship(sym, -1, -1, gameMap) {
//         generateShip(sym);
//     }
//     void actionShooting() override {
//         static int count = 0;
//         pair<int, int> location = getLocation();
//         int i = location.first;
//         int j = location.second;

//         vector<pair<int, int>> shoot = {{1, 1}, {1, 0}, {0, 1}, {-1, 0}, {-1, -1}, {1, -1}, {-1, 1}, {0, -1}};

//         for (int count = 0; count < 3; count++) { // Allow up to 3 shots
//             srand(time(0) + count); // Different seed for randomness
//             int ran = rand() % shoot.size(); // Random index within the shoot vector

//             int newI = i + shoot[ran].first;
//         }
//     }
    
// };



  else if (Asym[i][0] == '#') {
             AShips.push_back(new Destroyer(Asym[i], gameMap));
         } else if (Asym[i][0] == '@') {
             AShips.push_back(new Frigate(Asym[i], gameMap));
        }